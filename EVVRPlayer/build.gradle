import com.android.build.gradle.AppPlugin
import com.android.build.gradle.LibraryPlugin
import proguard.gradle.ProGuardTask

apply plugin: 'com.android.library'
apply plugin: 'maven'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 37
        versionName "1.2.1"


    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            java.srcDirs = ['src/main/java']
            res.srcDirs = ['src/main/res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }

    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:26.1.0'
    compile project(':EVSDKCore')
}

ext {
    PUBLISH_GROUP_ID = "com.easyvaas.sdk";
    PUBLISH_ARTIFACT_ID = "evvrplayer"
    PUBLISH_ARTIFACT_NO_PROGUARD = "evvrplayer-noproguard";
    PUBLISH_VERSION = android.defaultConfig.versionName
}

task clearJar(type: Delete) {
    delete ('build/libs/' + project.PUBLISH_ARTIFACT_ID + '-' + project.PUBLISH_VERSION + '.jar')
}

task buildJar(dependsOn: ['compileReleaseJavaWithJavac'], type: Jar) {
    baseName = project.PUBLISH_ARTIFACT_NO_PROGUARD
    version = project.PUBLISH_VERSION

    extension = "jar"
    //if not set, the default name was [baseName]-[appendix]-[version]-[classifier].[extension]
    //archiveName = "AndroidJarDemo.jar"

    //src dir
    def srcClassDir = [project.buildDir.absolutePath + "/intermediates/classes/release"];
    from srcClassDir

    //exclude some files
    exclude "com/easyvaas/sdk/vrplayer/BuildConfig.class"
    exclude "com/easyvaas/sdk/vrplayer/BuildConfig\$*.class"
    exclude "**/R.class"
    exclude "**/R\$*.class"
}

task proguardJar(dependsOn: ['buildJar'], type: ProGuardTask) {
    configuration android.getDefaultProguardFile('proguard-android.txt')
    configuration 'proguard-rules.pro'

    String inJar = buildJar.archivePath.getAbsolutePath()
    injars inJar
    outjars inJar.substring(0, inJar.lastIndexOf('/')) + '/' + project.PUBLISH_ARTIFACT_ID + '-' + project.PUBLISH_VERSION + '.jar'

    dontshrink

    Plugin plugin = getPlugins().hasPlugin(AppPlugin) ?
            getPlugins().findPlugin(AppPlugin) :
            getPlugins().findPlugin(LibraryPlugin)
    if (plugin != null) {
        List<String> runtimeJarList
        if (plugin.getMetaClass().getMetaMethod("getRuntimeJarList")) {
            runtimeJarList = plugin.getRuntimeJarList()
        } else if (android.getMetaClass().getMetaMethod("getBootClasspath")) {
            runtimeJarList = android.getBootClasspath()
        } else {
            runtimeJarList = plugin.getBootClasspath()
        }

        for (String runtimeJar : runtimeJarList) {
            libraryjars(runtimeJar)
        }
    }
}

uploadArchives {
    repositories.mavenDeployer {
        def deployPath = file(rootProject.ext.aarDeployPath)
        repository(url: "file://${deployPath.absolutePath}")
        pom.project {
            groupId project.PUBLISH_GROUP_ID
            artifactId project.PUBLISH_ARTIFACT_ID
            version project.PUBLISH_VERSION
            packaging 'aar'
        }
    }
}
uploadArchives.dependsOn(build)
